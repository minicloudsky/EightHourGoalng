// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/dbinstance"
)

// DbInstance is the model entity for the DbInstance schema.
type DbInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 实例id
	InstanceID string `json:"instance_id,omitempty"`
	// 实例名
	InstanceName string `json:"instance_name,omitempty"`
	// 实例连接地址
	Host string `json:"host,omitempty"`
	// 环境
	Env string `json:"env,omitempty"`
	// 实例类型
	InstanceType string `json:"instance_type,omitempty"`
	// 引擎类型
	Engine string `json:"engine,omitempty"`
	// 版本
	EngineVersion string `json:"engine_version,omitempty"`
	// 配置规格
	Specification string `json:"specification,omitempty"`
	// 实例状态
	InstanceStatus string `json:"instance_status,omitempty"`
	// 实例创建时间
	InstanceCreateTime string `json:"instance_create_time,omitempty"`
	// 实例注释; kv json
	Annotations map[string]string `json:"annotations,omitempty"`
	// 实例标签; kv json
	Labels map[string]string `json:"labels,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbinstance.FieldAnnotations, dbinstance.FieldLabels:
			values[i] = new([]byte)
		case dbinstance.FieldID:
			values[i] = new(sql.NullInt64)
		case dbinstance.FieldInstanceID, dbinstance.FieldInstanceName, dbinstance.FieldHost, dbinstance.FieldEnv, dbinstance.FieldInstanceType, dbinstance.FieldEngine, dbinstance.FieldEngineVersion, dbinstance.FieldSpecification, dbinstance.FieldInstanceStatus, dbinstance.FieldInstanceCreateTime:
			values[i] = new(sql.NullString)
		case dbinstance.FieldCreateTime, dbinstance.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbInstance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbInstance fields.
func (di *DbInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int(value.Int64)
		case dbinstance.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				di.CreateTime = value.Time
			}
		case dbinstance.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				di.UpdateTime = value.Time
			}
		case dbinstance.FieldInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_id", values[i])
			} else if value.Valid {
				di.InstanceID = value.String
			}
		case dbinstance.FieldInstanceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_name", values[i])
			} else if value.Valid {
				di.InstanceName = value.String
			}
		case dbinstance.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				di.Host = value.String
			}
		case dbinstance.FieldEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value.Valid {
				di.Env = value.String
			}
		case dbinstance.FieldInstanceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_type", values[i])
			} else if value.Valid {
				di.InstanceType = value.String
			}
		case dbinstance.FieldEngine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine", values[i])
			} else if value.Valid {
				di.Engine = value.String
			}
		case dbinstance.FieldEngineVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_version", values[i])
			} else if value.Valid {
				di.EngineVersion = value.String
			}
		case dbinstance.FieldSpecification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specification", values[i])
			} else if value.Valid {
				di.Specification = value.String
			}
		case dbinstance.FieldInstanceStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_status", values[i])
			} else if value.Valid {
				di.InstanceStatus = value.String
			}
		case dbinstance.FieldInstanceCreateTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_create_time", values[i])
			} else if value.Valid {
				di.InstanceCreateTime = value.String
			}
		case dbinstance.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &di.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case dbinstance.FieldLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &di.Labels); err != nil {
					return fmt.Errorf("unmarshal field labels: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DbInstance.
// Note that you need to call DbInstance.Unwrap() before calling this method if this DbInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DbInstance) Update() *DbInstanceUpdateOne {
	return (&DbInstanceClient{config: di.config}).UpdateOne(di)
}

// Unwrap unwraps the DbInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DbInstance) Unwrap() *DbInstance {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbInstance is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DbInstance) String() string {
	var builder strings.Builder
	builder.WriteString("DbInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("create_time=")
	builder.WriteString(di.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(di.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("instance_id=")
	builder.WriteString(di.InstanceID)
	builder.WriteString(", ")
	builder.WriteString("instance_name=")
	builder.WriteString(di.InstanceName)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(di.Host)
	builder.WriteString(", ")
	builder.WriteString("env=")
	builder.WriteString(di.Env)
	builder.WriteString(", ")
	builder.WriteString("instance_type=")
	builder.WriteString(di.InstanceType)
	builder.WriteString(", ")
	builder.WriteString("engine=")
	builder.WriteString(di.Engine)
	builder.WriteString(", ")
	builder.WriteString("engine_version=")
	builder.WriteString(di.EngineVersion)
	builder.WriteString(", ")
	builder.WriteString("specification=")
	builder.WriteString(di.Specification)
	builder.WriteString(", ")
	builder.WriteString("instance_status=")
	builder.WriteString(di.InstanceStatus)
	builder.WriteString(", ")
	builder.WriteString("instance_create_time=")
	builder.WriteString(di.InstanceCreateTime)
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", di.Annotations))
	builder.WriteString(", ")
	builder.WriteString("labels=")
	builder.WriteString(fmt.Sprintf("%v", di.Labels))
	builder.WriteByte(')')
	return builder.String()
}

// DbInstances is a parsable slice of DbInstance.
type DbInstances []*DbInstance

func (di DbInstances) config(cfg config) {
	for _i := range di {
		di[_i].config = cfg
	}
}
