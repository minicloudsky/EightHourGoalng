// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/dbinstance"
	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDbInstance = "DbInstance"
)

// DbInstanceMutation represents an operation that mutates the DbInstance nodes in the graph.
type DbInstanceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	create_time          *time.Time
	update_time          *time.Time
	instance_id          *string
	instance_name        *string
	host                 *string
	env                  *string
	instance_type        *string
	engine               *string
	engine_version       *string
	specification        *string
	instance_status      *string
	instance_create_time *string
	annotations          *map[string]string
	labels               *map[string]string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*DbInstance, error)
	predicates           []predicate.DbInstance
}

var _ ent.Mutation = (*DbInstanceMutation)(nil)

// dbinstanceOption allows management of the mutation configuration using functional options.
type dbinstanceOption func(*DbInstanceMutation)

// newDbInstanceMutation creates new mutation for the DbInstance entity.
func newDbInstanceMutation(c config, op Op, opts ...dbinstanceOption) *DbInstanceMutation {
	m := &DbInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeDbInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDbInstanceID sets the ID field of the mutation.
func withDbInstanceID(id int) dbinstanceOption {
	return func(m *DbInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *DbInstance
		)
		m.oldValue = func(ctx context.Context) (*DbInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DbInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDbInstance sets the old DbInstance of the mutation.
func withDbInstance(node *DbInstance) dbinstanceOption {
	return func(m *DbInstanceMutation) {
		m.oldValue = func(context.Context) (*DbInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DbInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DbInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DbInstanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DbInstanceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DbInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DbInstanceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DbInstanceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DbInstanceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DbInstanceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DbInstanceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DbInstanceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetInstanceID sets the "instance_id" field.
func (m *DbInstanceMutation) SetInstanceID(s string) {
	m.instance_id = &s
}

// InstanceID returns the value of the "instance_id" field in the mutation.
func (m *DbInstanceMutation) InstanceID() (r string, exists bool) {
	v := m.instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceID returns the old "instance_id" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceID: %w", err)
	}
	return oldValue.InstanceID, nil
}

// ResetInstanceID resets all changes to the "instance_id" field.
func (m *DbInstanceMutation) ResetInstanceID() {
	m.instance_id = nil
}

// SetInstanceName sets the "instance_name" field.
func (m *DbInstanceMutation) SetInstanceName(s string) {
	m.instance_name = &s
}

// InstanceName returns the value of the "instance_name" field in the mutation.
func (m *DbInstanceMutation) InstanceName() (r string, exists bool) {
	v := m.instance_name
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceName returns the old "instance_name" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldInstanceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceName: %w", err)
	}
	return oldValue.InstanceName, nil
}

// ResetInstanceName resets all changes to the "instance_name" field.
func (m *DbInstanceMutation) ResetInstanceName() {
	m.instance_name = nil
}

// SetHost sets the "host" field.
func (m *DbInstanceMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *DbInstanceMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *DbInstanceMutation) ResetHost() {
	m.host = nil
}

// SetEnv sets the "env" field.
func (m *DbInstanceMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *DbInstanceMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ResetEnv resets all changes to the "env" field.
func (m *DbInstanceMutation) ResetEnv() {
	m.env = nil
}

// SetInstanceType sets the "instance_type" field.
func (m *DbInstanceMutation) SetInstanceType(s string) {
	m.instance_type = &s
}

// InstanceType returns the value of the "instance_type" field in the mutation.
func (m *DbInstanceMutation) InstanceType() (r string, exists bool) {
	v := m.instance_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceType returns the old "instance_type" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldInstanceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceType: %w", err)
	}
	return oldValue.InstanceType, nil
}

// ResetInstanceType resets all changes to the "instance_type" field.
func (m *DbInstanceMutation) ResetInstanceType() {
	m.instance_type = nil
}

// SetEngine sets the "engine" field.
func (m *DbInstanceMutation) SetEngine(s string) {
	m.engine = &s
}

// Engine returns the value of the "engine" field in the mutation.
func (m *DbInstanceMutation) Engine() (r string, exists bool) {
	v := m.engine
	if v == nil {
		return
	}
	return *v, true
}

// OldEngine returns the old "engine" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldEngine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngine: %w", err)
	}
	return oldValue.Engine, nil
}

// ResetEngine resets all changes to the "engine" field.
func (m *DbInstanceMutation) ResetEngine() {
	m.engine = nil
}

// SetEngineVersion sets the "engine_version" field.
func (m *DbInstanceMutation) SetEngineVersion(s string) {
	m.engine_version = &s
}

// EngineVersion returns the value of the "engine_version" field in the mutation.
func (m *DbInstanceMutation) EngineVersion() (r string, exists bool) {
	v := m.engine_version
	if v == nil {
		return
	}
	return *v, true
}

// OldEngineVersion returns the old "engine_version" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldEngineVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngineVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngineVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngineVersion: %w", err)
	}
	return oldValue.EngineVersion, nil
}

// ResetEngineVersion resets all changes to the "engine_version" field.
func (m *DbInstanceMutation) ResetEngineVersion() {
	m.engine_version = nil
}

// SetSpecification sets the "specification" field.
func (m *DbInstanceMutation) SetSpecification(s string) {
	m.specification = &s
}

// Specification returns the value of the "specification" field in the mutation.
func (m *DbInstanceMutation) Specification() (r string, exists bool) {
	v := m.specification
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecification returns the old "specification" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldSpecification(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecification: %w", err)
	}
	return oldValue.Specification, nil
}

// ResetSpecification resets all changes to the "specification" field.
func (m *DbInstanceMutation) ResetSpecification() {
	m.specification = nil
}

// SetInstanceStatus sets the "instance_status" field.
func (m *DbInstanceMutation) SetInstanceStatus(s string) {
	m.instance_status = &s
}

// InstanceStatus returns the value of the "instance_status" field in the mutation.
func (m *DbInstanceMutation) InstanceStatus() (r string, exists bool) {
	v := m.instance_status
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceStatus returns the old "instance_status" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldInstanceStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceStatus: %w", err)
	}
	return oldValue.InstanceStatus, nil
}

// ResetInstanceStatus resets all changes to the "instance_status" field.
func (m *DbInstanceMutation) ResetInstanceStatus() {
	m.instance_status = nil
}

// SetInstanceCreateTime sets the "instance_create_time" field.
func (m *DbInstanceMutation) SetInstanceCreateTime(s string) {
	m.instance_create_time = &s
}

// InstanceCreateTime returns the value of the "instance_create_time" field in the mutation.
func (m *DbInstanceMutation) InstanceCreateTime() (r string, exists bool) {
	v := m.instance_create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceCreateTime returns the old "instance_create_time" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldInstanceCreateTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceCreateTime: %w", err)
	}
	return oldValue.InstanceCreateTime, nil
}

// ResetInstanceCreateTime resets all changes to the "instance_create_time" field.
func (m *DbInstanceMutation) ResetInstanceCreateTime() {
	m.instance_create_time = nil
}

// SetAnnotations sets the "annotations" field.
func (m *DbInstanceMutation) SetAnnotations(value map[string]string) {
	m.annotations = &value
}

// Annotations returns the value of the "annotations" field in the mutation.
func (m *DbInstanceMutation) Annotations() (r map[string]string, exists bool) {
	v := m.annotations
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnotations returns the old "annotations" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldAnnotations(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnotations is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnotations requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnotations: %w", err)
	}
	return oldValue.Annotations, nil
}

// ClearAnnotations clears the value of the "annotations" field.
func (m *DbInstanceMutation) ClearAnnotations() {
	m.annotations = nil
	m.clearedFields[dbinstance.FieldAnnotations] = struct{}{}
}

// AnnotationsCleared returns if the "annotations" field was cleared in this mutation.
func (m *DbInstanceMutation) AnnotationsCleared() bool {
	_, ok := m.clearedFields[dbinstance.FieldAnnotations]
	return ok
}

// ResetAnnotations resets all changes to the "annotations" field.
func (m *DbInstanceMutation) ResetAnnotations() {
	m.annotations = nil
	delete(m.clearedFields, dbinstance.FieldAnnotations)
}

// SetLabels sets the "labels" field.
func (m *DbInstanceMutation) SetLabels(value map[string]string) {
	m.labels = &value
}

// Labels returns the value of the "labels" field in the mutation.
func (m *DbInstanceMutation) Labels() (r map[string]string, exists bool) {
	v := m.labels
	if v == nil {
		return
	}
	return *v, true
}

// OldLabels returns the old "labels" field's value of the DbInstance entity.
// If the DbInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DbInstanceMutation) OldLabels(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabels: %w", err)
	}
	return oldValue.Labels, nil
}

// ClearLabels clears the value of the "labels" field.
func (m *DbInstanceMutation) ClearLabels() {
	m.labels = nil
	m.clearedFields[dbinstance.FieldLabels] = struct{}{}
}

// LabelsCleared returns if the "labels" field was cleared in this mutation.
func (m *DbInstanceMutation) LabelsCleared() bool {
	_, ok := m.clearedFields[dbinstance.FieldLabels]
	return ok
}

// ResetLabels resets all changes to the "labels" field.
func (m *DbInstanceMutation) ResetLabels() {
	m.labels = nil
	delete(m.clearedFields, dbinstance.FieldLabels)
}

// Where appends a list predicates to the DbInstanceMutation builder.
func (m *DbInstanceMutation) Where(ps ...predicate.DbInstance) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DbInstanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DbInstance).
func (m *DbInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DbInstanceMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.create_time != nil {
		fields = append(fields, dbinstance.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, dbinstance.FieldUpdateTime)
	}
	if m.instance_id != nil {
		fields = append(fields, dbinstance.FieldInstanceID)
	}
	if m.instance_name != nil {
		fields = append(fields, dbinstance.FieldInstanceName)
	}
	if m.host != nil {
		fields = append(fields, dbinstance.FieldHost)
	}
	if m.env != nil {
		fields = append(fields, dbinstance.FieldEnv)
	}
	if m.instance_type != nil {
		fields = append(fields, dbinstance.FieldInstanceType)
	}
	if m.engine != nil {
		fields = append(fields, dbinstance.FieldEngine)
	}
	if m.engine_version != nil {
		fields = append(fields, dbinstance.FieldEngineVersion)
	}
	if m.specification != nil {
		fields = append(fields, dbinstance.FieldSpecification)
	}
	if m.instance_status != nil {
		fields = append(fields, dbinstance.FieldInstanceStatus)
	}
	if m.instance_create_time != nil {
		fields = append(fields, dbinstance.FieldInstanceCreateTime)
	}
	if m.annotations != nil {
		fields = append(fields, dbinstance.FieldAnnotations)
	}
	if m.labels != nil {
		fields = append(fields, dbinstance.FieldLabels)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DbInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dbinstance.FieldCreateTime:
		return m.CreateTime()
	case dbinstance.FieldUpdateTime:
		return m.UpdateTime()
	case dbinstance.FieldInstanceID:
		return m.InstanceID()
	case dbinstance.FieldInstanceName:
		return m.InstanceName()
	case dbinstance.FieldHost:
		return m.Host()
	case dbinstance.FieldEnv:
		return m.Env()
	case dbinstance.FieldInstanceType:
		return m.InstanceType()
	case dbinstance.FieldEngine:
		return m.Engine()
	case dbinstance.FieldEngineVersion:
		return m.EngineVersion()
	case dbinstance.FieldSpecification:
		return m.Specification()
	case dbinstance.FieldInstanceStatus:
		return m.InstanceStatus()
	case dbinstance.FieldInstanceCreateTime:
		return m.InstanceCreateTime()
	case dbinstance.FieldAnnotations:
		return m.Annotations()
	case dbinstance.FieldLabels:
		return m.Labels()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DbInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dbinstance.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case dbinstance.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case dbinstance.FieldInstanceID:
		return m.OldInstanceID(ctx)
	case dbinstance.FieldInstanceName:
		return m.OldInstanceName(ctx)
	case dbinstance.FieldHost:
		return m.OldHost(ctx)
	case dbinstance.FieldEnv:
		return m.OldEnv(ctx)
	case dbinstance.FieldInstanceType:
		return m.OldInstanceType(ctx)
	case dbinstance.FieldEngine:
		return m.OldEngine(ctx)
	case dbinstance.FieldEngineVersion:
		return m.OldEngineVersion(ctx)
	case dbinstance.FieldSpecification:
		return m.OldSpecification(ctx)
	case dbinstance.FieldInstanceStatus:
		return m.OldInstanceStatus(ctx)
	case dbinstance.FieldInstanceCreateTime:
		return m.OldInstanceCreateTime(ctx)
	case dbinstance.FieldAnnotations:
		return m.OldAnnotations(ctx)
	case dbinstance.FieldLabels:
		return m.OldLabels(ctx)
	}
	return nil, fmt.Errorf("unknown DbInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dbinstance.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case dbinstance.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case dbinstance.FieldInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceID(v)
		return nil
	case dbinstance.FieldInstanceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceName(v)
		return nil
	case dbinstance.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	case dbinstance.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case dbinstance.FieldInstanceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceType(v)
		return nil
	case dbinstance.FieldEngine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngine(v)
		return nil
	case dbinstance.FieldEngineVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngineVersion(v)
		return nil
	case dbinstance.FieldSpecification:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecification(v)
		return nil
	case dbinstance.FieldInstanceStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceStatus(v)
		return nil
	case dbinstance.FieldInstanceCreateTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceCreateTime(v)
		return nil
	case dbinstance.FieldAnnotations:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnotations(v)
		return nil
	case dbinstance.FieldLabels:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabels(v)
		return nil
	}
	return fmt.Errorf("unknown DbInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DbInstanceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DbInstanceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DbInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DbInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DbInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dbinstance.FieldAnnotations) {
		fields = append(fields, dbinstance.FieldAnnotations)
	}
	if m.FieldCleared(dbinstance.FieldLabels) {
		fields = append(fields, dbinstance.FieldLabels)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DbInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DbInstanceMutation) ClearField(name string) error {
	switch name {
	case dbinstance.FieldAnnotations:
		m.ClearAnnotations()
		return nil
	case dbinstance.FieldLabels:
		m.ClearLabels()
		return nil
	}
	return fmt.Errorf("unknown DbInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DbInstanceMutation) ResetField(name string) error {
	switch name {
	case dbinstance.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case dbinstance.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case dbinstance.FieldInstanceID:
		m.ResetInstanceID()
		return nil
	case dbinstance.FieldInstanceName:
		m.ResetInstanceName()
		return nil
	case dbinstance.FieldHost:
		m.ResetHost()
		return nil
	case dbinstance.FieldEnv:
		m.ResetEnv()
		return nil
	case dbinstance.FieldInstanceType:
		m.ResetInstanceType()
		return nil
	case dbinstance.FieldEngine:
		m.ResetEngine()
		return nil
	case dbinstance.FieldEngineVersion:
		m.ResetEngineVersion()
		return nil
	case dbinstance.FieldSpecification:
		m.ResetSpecification()
		return nil
	case dbinstance.FieldInstanceStatus:
		m.ResetInstanceStatus()
		return nil
	case dbinstance.FieldInstanceCreateTime:
		m.ResetInstanceCreateTime()
		return nil
	case dbinstance.FieldAnnotations:
		m.ResetAnnotations()
		return nil
	case dbinstance.FieldLabels:
		m.ResetLabels()
		return nil
	}
	return fmt.Errorf("unknown DbInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DbInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DbInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DbInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DbInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DbInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DbInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DbInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DbInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DbInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DbInstance edge %s", name)
}
