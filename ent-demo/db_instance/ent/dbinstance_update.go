// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/dbinstance"
	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/predicate"
)

// DbInstanceUpdate is the builder for updating DbInstance entities.
type DbInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *DbInstanceMutation
}

// Where appends a list predicates to the DbInstanceUpdate builder.
func (diu *DbInstanceUpdate) Where(ps ...predicate.DbInstance) *DbInstanceUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetCreateTime sets the "create_time" field.
func (diu *DbInstanceUpdate) SetCreateTime(t time.Time) *DbInstanceUpdate {
	diu.mutation.SetCreateTime(t)
	return diu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableCreateTime(t *time.Time) *DbInstanceUpdate {
	if t != nil {
		diu.SetCreateTime(*t)
	}
	return diu
}

// SetUpdateTime sets the "update_time" field.
func (diu *DbInstanceUpdate) SetUpdateTime(t time.Time) *DbInstanceUpdate {
	diu.mutation.SetUpdateTime(t)
	return diu
}

// SetInstanceID sets the "instance_id" field.
func (diu *DbInstanceUpdate) SetInstanceID(s string) *DbInstanceUpdate {
	diu.mutation.SetInstanceID(s)
	return diu
}

// SetInstanceName sets the "instance_name" field.
func (diu *DbInstanceUpdate) SetInstanceName(s string) *DbInstanceUpdate {
	diu.mutation.SetInstanceName(s)
	return diu
}

// SetNillableInstanceName sets the "instance_name" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableInstanceName(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetInstanceName(*s)
	}
	return diu
}

// SetHost sets the "host" field.
func (diu *DbInstanceUpdate) SetHost(s string) *DbInstanceUpdate {
	diu.mutation.SetHost(s)
	return diu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableHost(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetHost(*s)
	}
	return diu
}

// SetEnv sets the "env" field.
func (diu *DbInstanceUpdate) SetEnv(s string) *DbInstanceUpdate {
	diu.mutation.SetEnv(s)
	return diu
}

// SetInstanceType sets the "instance_type" field.
func (diu *DbInstanceUpdate) SetInstanceType(s string) *DbInstanceUpdate {
	diu.mutation.SetInstanceType(s)
	return diu
}

// SetNillableInstanceType sets the "instance_type" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableInstanceType(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetInstanceType(*s)
	}
	return diu
}

// SetEngine sets the "engine" field.
func (diu *DbInstanceUpdate) SetEngine(s string) *DbInstanceUpdate {
	diu.mutation.SetEngine(s)
	return diu
}

// SetNillableEngine sets the "engine" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableEngine(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetEngine(*s)
	}
	return diu
}

// SetEngineVersion sets the "engine_version" field.
func (diu *DbInstanceUpdate) SetEngineVersion(s string) *DbInstanceUpdate {
	diu.mutation.SetEngineVersion(s)
	return diu
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableEngineVersion(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetEngineVersion(*s)
	}
	return diu
}

// SetSpecification sets the "specification" field.
func (diu *DbInstanceUpdate) SetSpecification(s string) *DbInstanceUpdate {
	diu.mutation.SetSpecification(s)
	return diu
}

// SetNillableSpecification sets the "specification" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableSpecification(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetSpecification(*s)
	}
	return diu
}

// SetInstanceStatus sets the "instance_status" field.
func (diu *DbInstanceUpdate) SetInstanceStatus(s string) *DbInstanceUpdate {
	diu.mutation.SetInstanceStatus(s)
	return diu
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (diu *DbInstanceUpdate) SetNillableInstanceStatus(s *string) *DbInstanceUpdate {
	if s != nil {
		diu.SetInstanceStatus(*s)
	}
	return diu
}

// SetInstanceCreateTime sets the "instance_create_time" field.
func (diu *DbInstanceUpdate) SetInstanceCreateTime(s string) *DbInstanceUpdate {
	diu.mutation.SetInstanceCreateTime(s)
	return diu
}

// SetAnnotations sets the "annotations" field.
func (diu *DbInstanceUpdate) SetAnnotations(m map[string]string) *DbInstanceUpdate {
	diu.mutation.SetAnnotations(m)
	return diu
}

// ClearAnnotations clears the value of the "annotations" field.
func (diu *DbInstanceUpdate) ClearAnnotations() *DbInstanceUpdate {
	diu.mutation.ClearAnnotations()
	return diu
}

// SetLabels sets the "labels" field.
func (diu *DbInstanceUpdate) SetLabels(m map[string]string) *DbInstanceUpdate {
	diu.mutation.SetLabels(m)
	return diu
}

// ClearLabels clears the value of the "labels" field.
func (diu *DbInstanceUpdate) ClearLabels() *DbInstanceUpdate {
	diu.mutation.ClearLabels()
	return diu
}

// Mutation returns the DbInstanceMutation object of the builder.
func (diu *DbInstanceUpdate) Mutation() *DbInstanceMutation {
	return diu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DbInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	diu.defaults()
	if len(diu.hooks) == 0 {
		if err = diu.check(); err != nil {
			return 0, err
		}
		affected, err = diu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = diu.check(); err != nil {
				return 0, err
			}
			diu.mutation = mutation
			affected, err = diu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(diu.hooks) - 1; i >= 0; i-- {
			if diu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = diu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, diu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DbInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DbInstanceUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DbInstanceUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diu *DbInstanceUpdate) defaults() {
	if _, ok := diu.mutation.UpdateTime(); !ok {
		v := dbinstance.UpdateDefaultUpdateTime()
		diu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DbInstanceUpdate) check() error {
	if v, ok := diu.mutation.InstanceID(); ok {
		if err := dbinstance.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_id": %w`, err)}
		}
	}
	if v, ok := diu.mutation.InstanceName(); ok {
		if err := dbinstance.InstanceNameValidator(v); err != nil {
			return &ValidationError{Name: "instance_name", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_name": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Host(); ok {
		if err := dbinstance.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "DbInstance.host": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Env(); ok {
		if err := dbinstance.EnvValidator(v); err != nil {
			return &ValidationError{Name: "env", err: fmt.Errorf(`ent: validator failed for field "DbInstance.env": %w`, err)}
		}
	}
	if v, ok := diu.mutation.InstanceType(); ok {
		if err := dbinstance.InstanceTypeValidator(v); err != nil {
			return &ValidationError{Name: "instance_type", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_type": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Engine(); ok {
		if err := dbinstance.EngineValidator(v); err != nil {
			return &ValidationError{Name: "engine", err: fmt.Errorf(`ent: validator failed for field "DbInstance.engine": %w`, err)}
		}
	}
	if v, ok := diu.mutation.EngineVersion(); ok {
		if err := dbinstance.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "DbInstance.engine_version": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Specification(); ok {
		if err := dbinstance.SpecificationValidator(v); err != nil {
			return &ValidationError{Name: "specification", err: fmt.Errorf(`ent: validator failed for field "DbInstance.specification": %w`, err)}
		}
	}
	if v, ok := diu.mutation.InstanceStatus(); ok {
		if err := dbinstance.InstanceStatusValidator(v); err != nil {
			return &ValidationError{Name: "instance_status", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_status": %w`, err)}
		}
	}
	if v, ok := diu.mutation.InstanceCreateTime(); ok {
		if err := dbinstance.InstanceCreateTimeValidator(v); err != nil {
			return &ValidationError{Name: "instance_create_time", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_create_time": %w`, err)}
		}
	}
	return nil
}

func (diu *DbInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbinstance.Table,
			Columns: dbinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbinstance.FieldID,
			},
		},
	}
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.CreateTime(); ok {
		_spec.SetField(dbinstance.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := diu.mutation.UpdateTime(); ok {
		_spec.SetField(dbinstance.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := diu.mutation.InstanceID(); ok {
		_spec.SetField(dbinstance.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := diu.mutation.InstanceName(); ok {
		_spec.SetField(dbinstance.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := diu.mutation.Host(); ok {
		_spec.SetField(dbinstance.FieldHost, field.TypeString, value)
	}
	if value, ok := diu.mutation.Env(); ok {
		_spec.SetField(dbinstance.FieldEnv, field.TypeString, value)
	}
	if value, ok := diu.mutation.InstanceType(); ok {
		_spec.SetField(dbinstance.FieldInstanceType, field.TypeString, value)
	}
	if value, ok := diu.mutation.Engine(); ok {
		_spec.SetField(dbinstance.FieldEngine, field.TypeString, value)
	}
	if value, ok := diu.mutation.EngineVersion(); ok {
		_spec.SetField(dbinstance.FieldEngineVersion, field.TypeString, value)
	}
	if value, ok := diu.mutation.Specification(); ok {
		_spec.SetField(dbinstance.FieldSpecification, field.TypeString, value)
	}
	if value, ok := diu.mutation.InstanceStatus(); ok {
		_spec.SetField(dbinstance.FieldInstanceStatus, field.TypeString, value)
	}
	if value, ok := diu.mutation.InstanceCreateTime(); ok {
		_spec.SetField(dbinstance.FieldInstanceCreateTime, field.TypeString, value)
	}
	if value, ok := diu.mutation.Annotations(); ok {
		_spec.SetField(dbinstance.FieldAnnotations, field.TypeJSON, value)
	}
	if diu.mutation.AnnotationsCleared() {
		_spec.ClearField(dbinstance.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := diu.mutation.Labels(); ok {
		_spec.SetField(dbinstance.FieldLabels, field.TypeJSON, value)
	}
	if diu.mutation.LabelsCleared() {
		_spec.ClearField(dbinstance.FieldLabels, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbInstanceUpdateOne is the builder for updating a single DbInstance entity.
type DbInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbInstanceMutation
}

// SetCreateTime sets the "create_time" field.
func (diuo *DbInstanceUpdateOne) SetCreateTime(t time.Time) *DbInstanceUpdateOne {
	diuo.mutation.SetCreateTime(t)
	return diuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableCreateTime(t *time.Time) *DbInstanceUpdateOne {
	if t != nil {
		diuo.SetCreateTime(*t)
	}
	return diuo
}

// SetUpdateTime sets the "update_time" field.
func (diuo *DbInstanceUpdateOne) SetUpdateTime(t time.Time) *DbInstanceUpdateOne {
	diuo.mutation.SetUpdateTime(t)
	return diuo
}

// SetInstanceID sets the "instance_id" field.
func (diuo *DbInstanceUpdateOne) SetInstanceID(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetInstanceID(s)
	return diuo
}

// SetInstanceName sets the "instance_name" field.
func (diuo *DbInstanceUpdateOne) SetInstanceName(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetInstanceName(s)
	return diuo
}

// SetNillableInstanceName sets the "instance_name" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableInstanceName(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetInstanceName(*s)
	}
	return diuo
}

// SetHost sets the "host" field.
func (diuo *DbInstanceUpdateOne) SetHost(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetHost(s)
	return diuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableHost(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetHost(*s)
	}
	return diuo
}

// SetEnv sets the "env" field.
func (diuo *DbInstanceUpdateOne) SetEnv(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetEnv(s)
	return diuo
}

// SetInstanceType sets the "instance_type" field.
func (diuo *DbInstanceUpdateOne) SetInstanceType(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetInstanceType(s)
	return diuo
}

// SetNillableInstanceType sets the "instance_type" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableInstanceType(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetInstanceType(*s)
	}
	return diuo
}

// SetEngine sets the "engine" field.
func (diuo *DbInstanceUpdateOne) SetEngine(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetEngine(s)
	return diuo
}

// SetNillableEngine sets the "engine" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableEngine(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetEngine(*s)
	}
	return diuo
}

// SetEngineVersion sets the "engine_version" field.
func (diuo *DbInstanceUpdateOne) SetEngineVersion(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetEngineVersion(s)
	return diuo
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableEngineVersion(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetEngineVersion(*s)
	}
	return diuo
}

// SetSpecification sets the "specification" field.
func (diuo *DbInstanceUpdateOne) SetSpecification(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetSpecification(s)
	return diuo
}

// SetNillableSpecification sets the "specification" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableSpecification(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetSpecification(*s)
	}
	return diuo
}

// SetInstanceStatus sets the "instance_status" field.
func (diuo *DbInstanceUpdateOne) SetInstanceStatus(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetInstanceStatus(s)
	return diuo
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (diuo *DbInstanceUpdateOne) SetNillableInstanceStatus(s *string) *DbInstanceUpdateOne {
	if s != nil {
		diuo.SetInstanceStatus(*s)
	}
	return diuo
}

// SetInstanceCreateTime sets the "instance_create_time" field.
func (diuo *DbInstanceUpdateOne) SetInstanceCreateTime(s string) *DbInstanceUpdateOne {
	diuo.mutation.SetInstanceCreateTime(s)
	return diuo
}

// SetAnnotations sets the "annotations" field.
func (diuo *DbInstanceUpdateOne) SetAnnotations(m map[string]string) *DbInstanceUpdateOne {
	diuo.mutation.SetAnnotations(m)
	return diuo
}

// ClearAnnotations clears the value of the "annotations" field.
func (diuo *DbInstanceUpdateOne) ClearAnnotations() *DbInstanceUpdateOne {
	diuo.mutation.ClearAnnotations()
	return diuo
}

// SetLabels sets the "labels" field.
func (diuo *DbInstanceUpdateOne) SetLabels(m map[string]string) *DbInstanceUpdateOne {
	diuo.mutation.SetLabels(m)
	return diuo
}

// ClearLabels clears the value of the "labels" field.
func (diuo *DbInstanceUpdateOne) ClearLabels() *DbInstanceUpdateOne {
	diuo.mutation.ClearLabels()
	return diuo
}

// Mutation returns the DbInstanceMutation object of the builder.
func (diuo *DbInstanceUpdateOne) Mutation() *DbInstanceMutation {
	return diuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DbInstanceUpdateOne) Select(field string, fields ...string) *DbInstanceUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DbInstance entity.
func (diuo *DbInstanceUpdateOne) Save(ctx context.Context) (*DbInstance, error) {
	var (
		err  error
		node *DbInstance
	)
	diuo.defaults()
	if len(diuo.hooks) == 0 {
		if err = diuo.check(); err != nil {
			return nil, err
		}
		node, err = diuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = diuo.check(); err != nil {
				return nil, err
			}
			diuo.mutation = mutation
			node, err = diuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(diuo.hooks) - 1; i >= 0; i-- {
			if diuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = diuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, diuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbInstance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbInstanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DbInstanceUpdateOne) SaveX(ctx context.Context) *DbInstance {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DbInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DbInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diuo *DbInstanceUpdateOne) defaults() {
	if _, ok := diuo.mutation.UpdateTime(); !ok {
		v := dbinstance.UpdateDefaultUpdateTime()
		diuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DbInstanceUpdateOne) check() error {
	if v, ok := diuo.mutation.InstanceID(); ok {
		if err := dbinstance.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_id": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.InstanceName(); ok {
		if err := dbinstance.InstanceNameValidator(v); err != nil {
			return &ValidationError{Name: "instance_name", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_name": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Host(); ok {
		if err := dbinstance.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "DbInstance.host": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Env(); ok {
		if err := dbinstance.EnvValidator(v); err != nil {
			return &ValidationError{Name: "env", err: fmt.Errorf(`ent: validator failed for field "DbInstance.env": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.InstanceType(); ok {
		if err := dbinstance.InstanceTypeValidator(v); err != nil {
			return &ValidationError{Name: "instance_type", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_type": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Engine(); ok {
		if err := dbinstance.EngineValidator(v); err != nil {
			return &ValidationError{Name: "engine", err: fmt.Errorf(`ent: validator failed for field "DbInstance.engine": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.EngineVersion(); ok {
		if err := dbinstance.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "DbInstance.engine_version": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Specification(); ok {
		if err := dbinstance.SpecificationValidator(v); err != nil {
			return &ValidationError{Name: "specification", err: fmt.Errorf(`ent: validator failed for field "DbInstance.specification": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.InstanceStatus(); ok {
		if err := dbinstance.InstanceStatusValidator(v); err != nil {
			return &ValidationError{Name: "instance_status", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_status": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.InstanceCreateTime(); ok {
		if err := dbinstance.InstanceCreateTimeValidator(v); err != nil {
			return &ValidationError{Name: "instance_create_time", err: fmt.Errorf(`ent: validator failed for field "DbInstance.instance_create_time": %w`, err)}
		}
	}
	return nil
}

func (diuo *DbInstanceUpdateOne) sqlSave(ctx context.Context) (_node *DbInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbinstance.Table,
			Columns: dbinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbinstance.FieldID,
			},
		},
	}
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbinstance.FieldID)
		for _, f := range fields {
			if !dbinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.CreateTime(); ok {
		_spec.SetField(dbinstance.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := diuo.mutation.UpdateTime(); ok {
		_spec.SetField(dbinstance.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := diuo.mutation.InstanceID(); ok {
		_spec.SetField(dbinstance.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := diuo.mutation.InstanceName(); ok {
		_spec.SetField(dbinstance.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Host(); ok {
		_spec.SetField(dbinstance.FieldHost, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Env(); ok {
		_spec.SetField(dbinstance.FieldEnv, field.TypeString, value)
	}
	if value, ok := diuo.mutation.InstanceType(); ok {
		_spec.SetField(dbinstance.FieldInstanceType, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Engine(); ok {
		_spec.SetField(dbinstance.FieldEngine, field.TypeString, value)
	}
	if value, ok := diuo.mutation.EngineVersion(); ok {
		_spec.SetField(dbinstance.FieldEngineVersion, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Specification(); ok {
		_spec.SetField(dbinstance.FieldSpecification, field.TypeString, value)
	}
	if value, ok := diuo.mutation.InstanceStatus(); ok {
		_spec.SetField(dbinstance.FieldInstanceStatus, field.TypeString, value)
	}
	if value, ok := diuo.mutation.InstanceCreateTime(); ok {
		_spec.SetField(dbinstance.FieldInstanceCreateTime, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Annotations(); ok {
		_spec.SetField(dbinstance.FieldAnnotations, field.TypeJSON, value)
	}
	if diuo.mutation.AnnotationsCleared() {
		_spec.ClearField(dbinstance.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := diuo.mutation.Labels(); ok {
		_spec.SetField(dbinstance.FieldLabels, field.TypeJSON, value)
	}
	if diuo.mutation.LabelsCleared() {
		_spec.ClearField(dbinstance.FieldLabels, field.TypeJSON)
	}
	_node = &DbInstance{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
