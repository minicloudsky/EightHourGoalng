// Code generated by ent, DO NOT EDIT.

package dbinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minicloudsky/golang-in-action/ent-demo/db_instance/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// InstanceID applies equality check predicate on the "instance_id" field. It's identical to InstanceIDEQ.
func InstanceID(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InstanceName applies equality check predicate on the "instance_name" field. It's identical to InstanceNameEQ.
func InstanceName(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceName), v))
	})
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// InstanceType applies equality check predicate on the "instance_type" field. It's identical to InstanceTypeEQ.
func InstanceType(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// Engine applies equality check predicate on the "engine" field. It's identical to EngineEQ.
func Engine(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngine), v))
	})
}

// EngineVersion applies equality check predicate on the "engine_version" field. It's identical to EngineVersionEQ.
func EngineVersion(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineVersion), v))
	})
}

// Specification applies equality check predicate on the "specification" field. It's identical to SpecificationEQ.
func Specification(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecification), v))
	})
}

// InstanceStatus applies equality check predicate on the "instance_status" field. It's identical to InstanceStatusEQ.
func InstanceStatus(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceStatus), v))
	})
}

// InstanceCreateTime applies equality check predicate on the "instance_create_time" field. It's identical to InstanceCreateTimeEQ.
func InstanceCreateTime(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceCreateTime), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// InstanceIDEQ applies the EQ predicate on the "instance_id" field.
func InstanceIDEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDNEQ applies the NEQ predicate on the "instance_id" field.
func InstanceIDNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDIn applies the In predicate on the "instance_id" field.
func InstanceIDIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDNotIn applies the NotIn predicate on the "instance_id" field.
func InstanceIDNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDGT applies the GT predicate on the "instance_id" field.
func InstanceIDGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDGTE applies the GTE predicate on the "instance_id" field.
func InstanceIDGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLT applies the LT predicate on the "instance_id" field.
func InstanceIDLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLTE applies the LTE predicate on the "instance_id" field.
func InstanceIDLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContains applies the Contains predicate on the "instance_id" field.
func InstanceIDContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instance_id" field.
func InstanceIDHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instance_id" field.
func InstanceIDHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instance_id" field.
func InstanceIDEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instance_id" field.
func InstanceIDContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceID), v))
	})
}

// InstanceNameEQ applies the EQ predicate on the "instance_name" field.
func InstanceNameEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceName), v))
	})
}

// InstanceNameNEQ applies the NEQ predicate on the "instance_name" field.
func InstanceNameNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceName), v))
	})
}

// InstanceNameIn applies the In predicate on the "instance_name" field.
func InstanceNameIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceName), v...))
	})
}

// InstanceNameNotIn applies the NotIn predicate on the "instance_name" field.
func InstanceNameNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceName), v...))
	})
}

// InstanceNameGT applies the GT predicate on the "instance_name" field.
func InstanceNameGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceName), v))
	})
}

// InstanceNameGTE applies the GTE predicate on the "instance_name" field.
func InstanceNameGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceName), v))
	})
}

// InstanceNameLT applies the LT predicate on the "instance_name" field.
func InstanceNameLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceName), v))
	})
}

// InstanceNameLTE applies the LTE predicate on the "instance_name" field.
func InstanceNameLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceName), v))
	})
}

// InstanceNameContains applies the Contains predicate on the "instance_name" field.
func InstanceNameContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceName), v))
	})
}

// InstanceNameHasPrefix applies the HasPrefix predicate on the "instance_name" field.
func InstanceNameHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceName), v))
	})
}

// InstanceNameHasSuffix applies the HasSuffix predicate on the "instance_name" field.
func InstanceNameHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceName), v))
	})
}

// InstanceNameEqualFold applies the EqualFold predicate on the "instance_name" field.
func InstanceNameEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceName), v))
	})
}

// InstanceNameContainsFold applies the ContainsFold predicate on the "instance_name" field.
func InstanceNameContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceName), v))
	})
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHost), v))
	})
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHost), v...))
	})
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHost), v...))
	})
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHost), v))
	})
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHost), v))
	})
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHost), v))
	})
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHost), v))
	})
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHost), v))
	})
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHost), v))
	})
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHost), v))
	})
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHost), v))
	})
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHost), v))
	})
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnv), v))
	})
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnv), v...))
	})
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnv), v...))
	})
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnv), v))
	})
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnv), v))
	})
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnv), v))
	})
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnv), v))
	})
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnv), v))
	})
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnv), v))
	})
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnv), v))
	})
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnv), v))
	})
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnv), v))
	})
}

// InstanceTypeEQ applies the EQ predicate on the "instance_type" field.
func InstanceTypeEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeNEQ applies the NEQ predicate on the "instance_type" field.
func InstanceTypeNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeIn applies the In predicate on the "instance_type" field.
func InstanceTypeIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeNotIn applies the NotIn predicate on the "instance_type" field.
func InstanceTypeNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeGT applies the GT predicate on the "instance_type" field.
func InstanceTypeGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeGTE applies the GTE predicate on the "instance_type" field.
func InstanceTypeGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLT applies the LT predicate on the "instance_type" field.
func InstanceTypeLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLTE applies the LTE predicate on the "instance_type" field.
func InstanceTypeLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContains applies the Contains predicate on the "instance_type" field.
func InstanceTypeContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasPrefix applies the HasPrefix predicate on the "instance_type" field.
func InstanceTypeHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasSuffix applies the HasSuffix predicate on the "instance_type" field.
func InstanceTypeHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeEqualFold applies the EqualFold predicate on the "instance_type" field.
func InstanceTypeEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContainsFold applies the ContainsFold predicate on the "instance_type" field.
func InstanceTypeContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceType), v))
	})
}

// EngineEQ applies the EQ predicate on the "engine" field.
func EngineEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngine), v))
	})
}

// EngineNEQ applies the NEQ predicate on the "engine" field.
func EngineNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngine), v))
	})
}

// EngineIn applies the In predicate on the "engine" field.
func EngineIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEngine), v...))
	})
}

// EngineNotIn applies the NotIn predicate on the "engine" field.
func EngineNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEngine), v...))
	})
}

// EngineGT applies the GT predicate on the "engine" field.
func EngineGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngine), v))
	})
}

// EngineGTE applies the GTE predicate on the "engine" field.
func EngineGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngine), v))
	})
}

// EngineLT applies the LT predicate on the "engine" field.
func EngineLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngine), v))
	})
}

// EngineLTE applies the LTE predicate on the "engine" field.
func EngineLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngine), v))
	})
}

// EngineContains applies the Contains predicate on the "engine" field.
func EngineContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEngine), v))
	})
}

// EngineHasPrefix applies the HasPrefix predicate on the "engine" field.
func EngineHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEngine), v))
	})
}

// EngineHasSuffix applies the HasSuffix predicate on the "engine" field.
func EngineHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEngine), v))
	})
}

// EngineEqualFold applies the EqualFold predicate on the "engine" field.
func EngineEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEngine), v))
	})
}

// EngineContainsFold applies the ContainsFold predicate on the "engine" field.
func EngineContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEngine), v))
	})
}

// EngineVersionEQ applies the EQ predicate on the "engine_version" field.
func EngineVersionEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionNEQ applies the NEQ predicate on the "engine_version" field.
func EngineVersionNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionIn applies the In predicate on the "engine_version" field.
func EngineVersionIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEngineVersion), v...))
	})
}

// EngineVersionNotIn applies the NotIn predicate on the "engine_version" field.
func EngineVersionNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEngineVersion), v...))
	})
}

// EngineVersionGT applies the GT predicate on the "engine_version" field.
func EngineVersionGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionGTE applies the GTE predicate on the "engine_version" field.
func EngineVersionGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionLT applies the LT predicate on the "engine_version" field.
func EngineVersionLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionLTE applies the LTE predicate on the "engine_version" field.
func EngineVersionLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionContains applies the Contains predicate on the "engine_version" field.
func EngineVersionContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionHasPrefix applies the HasPrefix predicate on the "engine_version" field.
func EngineVersionHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionHasSuffix applies the HasSuffix predicate on the "engine_version" field.
func EngineVersionHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionEqualFold applies the EqualFold predicate on the "engine_version" field.
func EngineVersionEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionContainsFold applies the ContainsFold predicate on the "engine_version" field.
func EngineVersionContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEngineVersion), v))
	})
}

// SpecificationEQ applies the EQ predicate on the "specification" field.
func SpecificationEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecification), v))
	})
}

// SpecificationNEQ applies the NEQ predicate on the "specification" field.
func SpecificationNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecification), v))
	})
}

// SpecificationIn applies the In predicate on the "specification" field.
func SpecificationIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpecification), v...))
	})
}

// SpecificationNotIn applies the NotIn predicate on the "specification" field.
func SpecificationNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpecification), v...))
	})
}

// SpecificationGT applies the GT predicate on the "specification" field.
func SpecificationGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecification), v))
	})
}

// SpecificationGTE applies the GTE predicate on the "specification" field.
func SpecificationGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecification), v))
	})
}

// SpecificationLT applies the LT predicate on the "specification" field.
func SpecificationLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecification), v))
	})
}

// SpecificationLTE applies the LTE predicate on the "specification" field.
func SpecificationLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecification), v))
	})
}

// SpecificationContains applies the Contains predicate on the "specification" field.
func SpecificationContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpecification), v))
	})
}

// SpecificationHasPrefix applies the HasPrefix predicate on the "specification" field.
func SpecificationHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpecification), v))
	})
}

// SpecificationHasSuffix applies the HasSuffix predicate on the "specification" field.
func SpecificationHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpecification), v))
	})
}

// SpecificationEqualFold applies the EqualFold predicate on the "specification" field.
func SpecificationEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpecification), v))
	})
}

// SpecificationContainsFold applies the ContainsFold predicate on the "specification" field.
func SpecificationContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpecification), v))
	})
}

// InstanceStatusEQ applies the EQ predicate on the "instance_status" field.
func InstanceStatusEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusNEQ applies the NEQ predicate on the "instance_status" field.
func InstanceStatusNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusIn applies the In predicate on the "instance_status" field.
func InstanceStatusIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceStatus), v...))
	})
}

// InstanceStatusNotIn applies the NotIn predicate on the "instance_status" field.
func InstanceStatusNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceStatus), v...))
	})
}

// InstanceStatusGT applies the GT predicate on the "instance_status" field.
func InstanceStatusGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusGTE applies the GTE predicate on the "instance_status" field.
func InstanceStatusGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusLT applies the LT predicate on the "instance_status" field.
func InstanceStatusLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusLTE applies the LTE predicate on the "instance_status" field.
func InstanceStatusLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusContains applies the Contains predicate on the "instance_status" field.
func InstanceStatusContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusHasPrefix applies the HasPrefix predicate on the "instance_status" field.
func InstanceStatusHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusHasSuffix applies the HasSuffix predicate on the "instance_status" field.
func InstanceStatusHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusEqualFold applies the EqualFold predicate on the "instance_status" field.
func InstanceStatusEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceStatus), v))
	})
}

// InstanceStatusContainsFold applies the ContainsFold predicate on the "instance_status" field.
func InstanceStatusContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceStatus), v))
	})
}

// InstanceCreateTimeEQ applies the EQ predicate on the "instance_create_time" field.
func InstanceCreateTimeEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeNEQ applies the NEQ predicate on the "instance_create_time" field.
func InstanceCreateTimeNEQ(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeIn applies the In predicate on the "instance_create_time" field.
func InstanceCreateTimeIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceCreateTime), v...))
	})
}

// InstanceCreateTimeNotIn applies the NotIn predicate on the "instance_create_time" field.
func InstanceCreateTimeNotIn(vs ...string) predicate.DbInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceCreateTime), v...))
	})
}

// InstanceCreateTimeGT applies the GT predicate on the "instance_create_time" field.
func InstanceCreateTimeGT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeGTE applies the GTE predicate on the "instance_create_time" field.
func InstanceCreateTimeGTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeLT applies the LT predicate on the "instance_create_time" field.
func InstanceCreateTimeLT(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeLTE applies the LTE predicate on the "instance_create_time" field.
func InstanceCreateTimeLTE(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeContains applies the Contains predicate on the "instance_create_time" field.
func InstanceCreateTimeContains(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeHasPrefix applies the HasPrefix predicate on the "instance_create_time" field.
func InstanceCreateTimeHasPrefix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeHasSuffix applies the HasSuffix predicate on the "instance_create_time" field.
func InstanceCreateTimeHasSuffix(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeEqualFold applies the EqualFold predicate on the "instance_create_time" field.
func InstanceCreateTimeEqualFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceCreateTime), v))
	})
}

// InstanceCreateTimeContainsFold applies the ContainsFold predicate on the "instance_create_time" field.
func InstanceCreateTimeContainsFold(v string) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceCreateTime), v))
	})
}

// AnnotationsIsNil applies the IsNil predicate on the "annotations" field.
func AnnotationsIsNil() predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnnotations)))
	})
}

// AnnotationsNotNil applies the NotNil predicate on the "annotations" field.
func AnnotationsNotNil() predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnnotations)))
	})
}

// LabelsIsNil applies the IsNil predicate on the "labels" field.
func LabelsIsNil() predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLabels)))
	})
}

// LabelsNotNil applies the NotNil predicate on the "labels" field.
func LabelsNotNil() predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLabels)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DbInstance) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DbInstance) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DbInstance) predicate.DbInstance {
	return predicate.DbInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
